"""
Django settings for todoproject project.

Generated by 'django-admin startproject' using Django 4.2.2.
"""

import os
from pathlib import Path
import dj_database_url  # Import dj-database-url
from dotenv import load_dotenv # Loads environment variables from .env file

# Load .env file variables into environment (for local development)
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# --- SECURITY SETTINGS ---

# SECURITY WARNING: keep the secret key used in production secret!
# Loaded from environment variable 'SECRET_KEY'
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# Load DEBUG from env var, default to False for production safety
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# Hosts allowed to access this site. '*' is insecure.
# Load from env var (comma-separated string), split into list.
ALLOWED_HOSTS_ENV = os.environ.get('ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS = ALLOWED_HOSTS_ENV.split(',')
else:
    ALLOWED_HOSTS = [] # Default empty, MUST be set in production env

# CSRF Trusted Origins for POST requests over HTTPS
# Load from env var (comma-separated string), split into list.
CSRF_TRUSTED_ORIGINS_ENV = os.environ.get('CSRF_TRUSTED_ORIGINS')
if CSRF_TRUSTED_ORIGINS_ENV:
     CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS_ENV.split(',')
else:
     CSRF_TRUSTED_ORIGINS = [] # Default empty, MUST be set in production env for your domain(s)


# --- APPLICATION DEFINITION ---

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', # Whitenoise (comes BEFORE staticfiles)
    'django.contrib.staticfiles',
    'todos' # Your app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Whitenoise (comes AFTER SecurityMiddleware)
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'todoproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Or BASE_DIR / 'templates'
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'todoproject.wsgi.application'


# --- DATABASE ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# Uses dj-database-url to parse DATABASE_URL environment variable
# Defaults to local SQLite if DATABASE_URL is not set

SQLITE_DB_PATH = BASE_DIR / 'db.sqlite3'
DATABASES = {
   'default': dj_database_url.config(
       # Provide the SQLite URL as default if DATABASE_URL is missing
       default=f'sqlite:///{SQLITE_DB_PATH}',
       # Optional: Set connection max age for pooling (e.g., for PostgreSQL)
       conn_max_age=600
   )
}


# --- PASSWORD VALIDATION ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # Keep defaults or customize
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# --- INTERNATIONALIZATION ---
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC' # Keep UTC for backend consistency, handle conversions in templates/frontend if needed
USE_I18N = True
USE_TZ = True


# --- STATIC FILES (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/' # URL to access static files

# Directories where Django looks for static files NOT belonging to an app (your project-level static)
STATICFILES_DIRS = [ BASE_DIR / "static", ]

# Directory where `collectstatic` will gather all static files for deployment
STATIC_ROOT = BASE_DIR / 'staticfiles' # Common convention

# Storage backend for static files handled by Whitenoise
# Check Django version; This is for Django 4.2+
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
# For older Django versions use:
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# --- DEFAULT PRIMARY KEY FIELD TYPE ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- LOGIN/LOGOUT REDIRECT ---
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


# --- PRODUCTION SECURITY SETTINGS (Optional but Recommended) ---
# Set these via environment variables in production, default to safer values
# Ensure your hosting platform handles TLS/SSL termination correctly

# SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'True') == 'True' # Default True for prod
# SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'True') == 'True' # Default True for prod
# CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'True') == 'True' # Default True for prod
# SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', 31536000)) # 1 year default, set to 0 disable
# SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'True') == 'True'
# SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'True') == 'True'
# # Header needed if your host (like Render/Heroku) terminates SSL and forwards via HTTP
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')